# https://hub.docker.com/r/library/node/tags/
# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
#AWS access keys stored as secret variables 
variables:
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID 
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
#This declares the pipeline stages  
stages:
  - deploy-staging
  - lint
  - build
  - test
  - deploy-production
cache:
  paths:
  - client/data-collection/node_modules/

lintJS:
  image: node:latest
  stage: lint
  script:
    - cd client/data-collection/
    - npm cache clean --force
    - rm -rf node_modules package-lock.json
    - npm install
    - npx eslint .

pylint:
  stage: lint
  image: python:3.8.2
  script:
    - export APP_SETTINGS=config.CITestingConfig
    - apt-get update -qy
    - pip3 install -r requirements.txt
    - pip3 install pylint_gitlab
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --output-format=text --load-plugins "pylint_flask_sqlalchemy, pylint_flask" api | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    # - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter --load-plugins "pylint_flask_sqlalchemy, pylint_flask" api > codeclimate.json
    # - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter --load-plugins "pylint_flask_sqlalchemy, pylint_flask" api > public/lint/index.html

    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/pylint.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public/badges/pylint.svg


buildJS:
  image: node:latest
  stage: build
  script:
    - cd client/data-collection
    - npm install JayDew/react-likert-scale
    - npm build
  artifacts:
      expire_in: 1 hour
      paths:
        - client/data-collection/build

testJS:
  image: node:latest
  stage: test
  script:
    - cd client/data-collection
    - npm install 
    - npm install JayDew/react-likert-scale
    - npm run test

pytest:
  stage: test
  image: python:3.8.2
  services:
  - postgres:alpine
  - redis:latest
  variables:
    POSTGRES_DB: test
    POSTGRES_USER: test
    POSTGRES_PASSWORD: test
  script:
  - export APP_SETTINGS=config.CITestingConfig
  - apt-get update -qy
  - pip3 install -r requirements.txt
  - coverage run --source api --branch -m pytest api
  - coverage report


deploy_staging_backend:
  stage: deploy-staging
  script:
    - apk add git
    - git config user.email "a.d.manolache@student.tudelft.nl"
    - git config user.name "amanolache"
    - git checkout dev
    - git remote add staging_backend https://heroku:$HEROKU_API_KEY@git.heroku.com/nemo-live-science-dev.git
    - git push staging_backend dev:master
    - echo "Deployed to Staging Server https://nemo-live-science-dev.herokuapp.com"
    # - apt-get update -qy
    # - apt-get install -y ruby-dev
    # - gem install dpl
    # - dpl --provider=heroku --app=nemo-live-science-dev --api-key=$HEROKU_STAGING_API_KEY
  environment:
    name: deploy-staging
    url: https://nemo-live-science-dev.herokuapp.com/
  when: manual
  only:
    - dev


deploy_staging_consent:
  stage: deploy-staging
  script:
    - git config user.email "a.d.manolache@student.tudelft.nl"
    - git config user.name "amanolache"
    - git checkout dev
    - git remote remove staging_consent
    - git remote add staging_consent https://heroku:$HEROKU_API_KEY@git.heroku.com/frontend-nemo.git
    - git subtree push --prefix client/client-consent-app/ staging_consent master
    - echo "Deployed to Staging Server https://frontend-nemo.herokuapp.com"
  environment:
    name: deploy-staging
    url: https://frontend-nemo.herokuapp.com/
  when: manual
  only:
    - dev


deploy_staging_collection:
  stage: deploy-staging
  script:
    - git config user.email "a.d.manolache@student.tudelft.nl"
    - git config user.name "amanolache"
    - git checkout dev
    - git remote remove staging_collection
    - git remote add staging_collection https://heroku:$HEROKU_API_KEY@git.heroku.com/collection-nemo.git
    - git subtree push --prefix client/data-collection/ staging_collection master
    - echo "Deployed to Staging Server https://collection-nemo.herokuapp.com"
  environment:
    name: deploy-staging
    url: https://collection-nemo.herokuapp.com/
  when: manual
  only:
    - dev


deploy_staging_dissemination:
  stage: deploy-staging
  script:
    - git config user.email "a.d.manolache@student.tudelft.nl"
    - git config user.name "amanolache"
    - git checkout dev
    - git remote remove staging_dissemination
    - git remote add staging_dissemination https://heroku:$HEROKU_API_KEY@git.heroku.com/dissemination-nemo.git
    - git subtree push --prefix client/data-dissemination/ staging_dissemination master
    - echo "Deployed to Staging Server https://dissemination-nemo.herokuapp.com"
  environment:
    name: deploy-staging
    url: https://dissemination-nemo.herokuapp.com/
  when: manual
  only:
    - dev
    

deploy_production_backend:
  stage: deploy-production
  script:
    - git config user.email "a.d.manolache@student.tudelft.nl"
    - git config user.name "amanolache"
    - git checkout master
    - git remote remove pro
    - git remote add pro https://heroku:$HEROKU_API_KEY@git.heroku.com/nemo-live-science.git
    - git push pro master:master
    - echo "Deployed to Production Server https://nemo-live-science.herokuapp.com"
  environment:
    name: deploy-production
    url: https://nemo-live-science.herokuapp.com/
  when: manual
  only:
    - master

